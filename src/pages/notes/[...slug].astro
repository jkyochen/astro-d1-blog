---
export const prerender = false;

import BlogPost from '../../layouts/BlogPost.astro';
import { createRepositories } from '../../db/database';
import { processMarkdown } from '../../lib/markdown-utils';
import type { PostWithTags } from '../../db/database';
import type { Tag } from '../../types/database';

// Get note from database based on slug
const { slug } = Astro.params;

if (!slug) {
	return Astro.redirect('/404');
}

let post: PostWithTags | null = null;

try {
	if (Astro.locals.runtime?.env.DB) {
		const repositories = createRepositories(Astro.locals.runtime.env.DB);
		post = await repositories.posts.findBySlug(slug as string);
	}
} catch (error) {
	console.error('Error fetching note:', error);
}

// Ensure this is a note and is published
if (!post || post.status !== 'published' || post.type !== 'note') {
	return Astro.redirect('/404');
}

// For notes without titles, generate a title from content
const generateNoteTitle = (content: string): string => {
	// Remove markdown formatting and get first 50 characters
	const cleanContent = content.replace(/[#*`\n]/g, '').trim();
	return cleanContent.length > 50 ? cleanContent.substring(0, 50) + '...' : cleanContent || 'Note';
};

// Convert database post to format expected by BlogPost layout
const postData = {
	title: post.title || generateNoteTitle(post.content), // Generate title from content for notes
	description: post.excerpt || '',
	pubDate: new Date(post.published_at || post.created_at),
	updatedDate: post.updated_at !== post.created_at ? new Date(post.updated_at) : undefined,
	heroImage: undefined,
	tags: post.tags as Tag[],
	type: post.type
};
---

<BlogPost {...postData}>
	<article class="prose prose-lg max-w-none" set:html={processMarkdown(post.content)} />
</BlogPost>