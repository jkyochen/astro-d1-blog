---
import AdminLayout from '../../components/AdminLayout.astro';
import MarkdownEditor from '../../components/MarkdownEditor.astro';

export const prerender = false;
---

<!-- Add Font Awesome icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<style>
  /* Enhanced card animations */
  .social-link-item,
  .custom-link-item {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    transform: translateY(0);
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  }
  
  .social-link-item:hover,
  .custom-link-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 25px 0 rgba(0, 0, 0, 0.1), 0 4px 12px 0 rgba(0, 0, 0, 0.05);
  }

  /* Icon container gradient animations */
  .social-link-item .w-10:nth-child(1) {
    position: relative;
    overflow: hidden;
  }
  
  .social-link-item .w-10:nth-child(1)::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    transition: left 0.6s;
  }
  
  .social-link-item:hover .w-10:nth-child(1)::before {
    left: 100%;
  }

  /* Enhanced Select Styling */
  .custom-select {
    background-image: none !important;
    position: relative;
    font-weight: 500;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .custom-select:focus {
    outline: none;
    border-color: #007AFF;
    box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1), 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }
  
  .custom-select:focus + .absolute svg,
  .custom-select:focus ~ .absolute svg {
    transform: rotate(180deg);
    color: #007AFF;
  }
  
  .custom-select:hover {
    border-color: rgba(118, 118, 128, 0.3);
    box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  .custom-select:hover + .absolute svg,
  .custom-select:hover ~ .absolute svg {
    color: rgba(118, 118, 128, 0.6);
  }

  /* Custom option styling (limited browser support) */
  .custom-select option {
    padding: 10px;
    background: white;
    color: #1f2937;
    border: none;
  }
  
  .custom-select option:hover,
  .custom-select option:checked {
    background: #f3f4f6;
    color: #1f2937;
  }

  /* Form field focus animations */
  .social-platform:focus,
  .social-url:focus,
  .social-display:focus,
  .custom-title:focus,
  .custom-url:focus,
  .custom-icon:focus,
  .custom-target:focus {
    box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
    border-color: #007AFF;
  }
  
  /* Select container hover effects */
  .relative:hover .custom-select {
    border-color: rgba(118, 118, 128, 0.3);
  }
  
  /* Improve select appearance on different browsers */
  .custom-select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    background-color: white;
    background-size: 0 !important;
  }
  
  /* Firefox specific fixes */
  @-moz-document url-prefix() {
    .custom-select {
      text-indent: 0.01px;
      text-overflow: '';
    }
  }

  /* Button hover effects */
  .group:hover button[title*="Remove"] {
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }

  /* Preview link styling */
  .social-link-item a,
  .custom-link-item a {
    transition: all 0.2s;
  }
  
  .social-link-item a:hover,
  .custom-link-item a:hover {
    color: #007AFF !important;
    transform: scale(1.02);
  }

  /* Empty state animations */
  .col-span-full svg {
    animation: float 3s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }
</style>

<AdminLayout title="Site Configuration">
  <!-- Page Header -->
  <div class="card px-8 py-6 mb-6">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-2xl font-bold text-apple-gray-900">Site Configuration</h1>
        <p class="mt-1 text-sm text-apple-gray-500">
          Manage your site's basic information, author profile, and social links.
        </p>
      </div>
      <a href="/admin" class="btn btn-secondary">
        Back to Dashboard
      </a>
    </div>
  </div>

  <!-- Message Container -->
  <div id="message-container" class="hidden mb-6">
    <!-- Messages will be dynamically inserted here -->
  </div>

  <!-- Loading State -->
  <div id="loading-state" class="card p-8 mb-6">
    <div class="text-center">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-apple-blue-500 mx-auto"></div>
      <p class="mt-2 text-apple-gray-600">Loading configuration...</p>
    </div>
  </div>

  <!-- Configuration Form -->
  <div id="config-form-container" class="hidden">
    <form id="config-form" class="space-y-8">
      
      <!-- Basic Site Information -->
      <div class="card p-8">
        <h2 class="text-lg font-semibold text-apple-gray-900 mb-6">Basic Site Information</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="site_title" class="block text-sm font-medium text-apple-gray-700 mb-2">
              Site Title <span class="text-apple-red">*</span>
            </label>
            <input
              type="text"
              id="site_title"
              name="site_title"
              required
              class="form-input"
              placeholder="My Personal Blog"
            />
          </div>
          
          <div>
            <label for="site_subtitle" class="block text-sm font-medium text-apple-gray-700 mb-2">
              Site Subtitle
            </label>
            <input
              type="text"
              id="site_subtitle"
              name="site_subtitle"
              class="form-input"
              placeholder="Sharing thoughts and experiences"
            />
          </div>
          
          <div class="md:col-span-2">
            <label for="meta_description" class="block text-sm font-medium text-apple-gray-700 mb-2">
              Meta Description
            </label>
            <textarea
              id="meta_description"
              name="meta_description"
              rows="3"
              class="form-textarea"
              placeholder="Brief description for search engines..."
            ></textarea>
          </div>
        </div>
      </div>

      <!-- Author Information -->
      <div class="card p-8">
        <h2 class="text-lg font-semibold text-apple-gray-900 mb-6">Author Information</h2>
        <div class="grid grid-cols-1 gap-6">
          <div>
            <label for="author_name" class="block text-sm font-medium text-apple-gray-700 mb-2">
              Author Name <span class="text-apple-red">*</span>
            </label>
            <input
              type="text"
              id="author_name"
              name="author_name"
              required
              class="form-input"
              placeholder="Your Name"
            />
          </div>
        </div>
      </div>

      <!-- Social Links -->
      <div class="card p-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-lg font-semibold text-apple-gray-900">Social Links</h2>
          <button
            type="button"
            id="add-social-link"
            class="btn btn-secondary btn-sm"
          >
            Add Social Link
          </button>
        </div>
        
        <div id="social-links-container" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <!-- Social links will be dynamically added here -->
        </div>
      </div>



      <!-- Save Button -->
      <div class="flex justify-end">
        <button
          type="submit"
          id="save-btn"
          class="btn btn-primary"
        >
          <span id="save-text">Save Configuration</span>
          <div id="save-spinner" class="hidden ml-2">
            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          </div>
        </button>
      </div>
      
    </form>
  </div>

</AdminLayout>

<script>
  import { SOCIAL_PLATFORMS } from '../../types/database';
  
  document.addEventListener('DOMContentLoaded', async () => {
    const loadingState = document.getElementById('loading-state');
    const configFormContainer = document.getElementById('config-form-container');
    const configForm = document.getElementById('config-form') as HTMLFormElement;
    const messageContainer = document.getElementById('message-container');
    const saveBtn = document.getElementById('save-btn') as HTMLButtonElement;
    const saveText = document.getElementById('save-text');
    const saveSpinner = document.getElementById('save-spinner');

    let currentConfig: any = null;
    let socialLinks: any[] = [];

    // Check authentication
    const token = localStorage.getItem('admin_token');
    const expires = localStorage.getItem('admin_token_expires');

    if (!token || !expires || new Date(expires) < new Date()) {
      window.location.href = '/admin/login';
      return;
    }

    // Initialize
    await loadConfiguration();
    setupEventListeners();

    async function loadConfiguration() {
             try {
         const response = await window.authFetch('/api/site-config');
         const result = await response.json() as { success: boolean; data?: any; error?: string };

         if (result.success) {
          currentConfig = result.data;
          populateForm(currentConfig);
          loadingState?.classList.add('hidden');
          configFormContainer?.classList.remove('hidden');
        } else {
          // No configuration exists, create default (simplified)
          currentConfig = {
            site_title: 'My Personal Blog',
            site_subtitle: '',
            author_name: 'Author',
            meta_description: '',
            social_links: [],
          };
          populateForm(currentConfig);
          loadingState?.classList.add('hidden');
          configFormContainer?.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Failed to load configuration:', error);
        showMessage('Failed to load configuration', 'error');
        loadingState?.classList.add('hidden');
      }
    }

    function populateForm(config: any) {
      // Populate basic fields (simplified)
      const fields = [
        'site_title', 'site_subtitle', 'author_name', 'meta_description'
      ];
      
      fields.forEach(field => {
        const input = document.getElementById(field) as HTMLInputElement | HTMLTextAreaElement;
        if (input && config[field]) {
          input.value = config[field];
        }
      });

      // Populate social links
      socialLinks = config.social_links || [];
      renderSocialLinks();
    }

    function setupEventListeners() {
      // Form submission
      configForm?.addEventListener('submit', handleSave);

      // Add social link
      document.getElementById('add-social-link')?.addEventListener('click', () => {
        addSocialLink();
      });
    }

    function renderSocialLinks() {
      const container = document.getElementById('social-links-container');
      if (!container) return;

      if (socialLinks.length === 0) {
        container.innerHTML = `
          <div class="col-span-full text-center py-12 text-apple-gray-500">
            <svg class="w-16 h-16 mx-auto mb-4 text-apple-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
            <p class="text-lg font-medium text-apple-gray-600 mb-2">No social links added yet</p>
            <p class="text-sm text-apple-gray-500">Click "Add Social Link" above to connect your social media profiles</p>
          </div>
        `;
        return;
      }

      container.innerHTML = socialLinks.map((link, index) => {
        const platform = SOCIAL_PLATFORMS[link.platform as keyof typeof SOCIAL_PLATFORMS] || SOCIAL_PLATFORMS.custom;
        const platformColor = platform.color;
        
        return `
          <div class="social-link-item group relative card p-6 hover:shadow-apple-lg transition-all duration-300">
            <!-- Platform Header -->
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 rounded-lg flex items-center justify-center text-white shadow-md" style="background-color: ${platformColor}">
                  <i class="fab ${platform.icon} text-lg" style="color: white"></i>
                </div>
                <div>
                  <h3 class="font-semibold text-apple-gray-900">${platform.name}</h3>
                  <p class="text-xs text-apple-gray-500">Social platform</p>
                </div>
              </div>
              <button 
                type="button" 
                class="opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-2 text-apple-gray-400 hover:text-apple-red hover:bg-apple-red/10 rounded-lg"
                onclick="removeSocialLink(${index})"
                title="Remove social link"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>

            <!-- Form Fields -->
            <div class="space-y-4">
              <!-- Platform Selection -->
              <div>
                <label class="block text-sm font-medium text-apple-gray-700 mb-2">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                  </svg>
                  Platform
                </label>
                <div class="relative">
                  <!-- Platform icon display -->
                  <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none z-10">
                    <i class="fab ${platform.icon} text-sm" style="color: ${platformColor}"></i>
                  </div>
                  
                  <select 
                    class="social-platform form-select w-full pl-10 pr-10 py-2.5 cursor-pointer" 
                    data-index="${index}"
                  >
                    ${Object.entries(SOCIAL_PLATFORMS).map(([key, platformOption]) => `
                      <option value="${key}" ${link.platform === key ? 'selected' : ''} data-icon="${platformOption.icon}" data-color="${platformOption.color}">
                        ${platformOption.name}
                      </option>
                    `).join('')}
                  </select>
                  
                  <!-- Dropdown arrow -->
                  <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                    <svg class="w-4 h-4 text-apple-gray-400 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </div>

              <!-- URL Field -->
              <div>
                <label class="block text-sm font-medium text-apple-gray-700 mb-2">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                  </svg>
                  Profile URL
                </label>
                <div class="relative">
                  <input 
                    type="url" 
                    class="social-url form-input pl-10" 
                    value="${link.url || ''}" 
                    data-index="${index}"
                    placeholder="https://example.com/yourprofile"
                  />
                  <svg class="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-apple-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>

              <!-- Display Text Field -->
              <div>
                <label class="block text-sm font-medium text-apple-gray-700 mb-2">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                  </svg>
                  Display Text
                  <span class="text-xs text-apple-gray-500 font-normal">(optional)</span>
                </label>
                <input 
                  type="text" 
                  class="social-display form-input" 
                  value="${link.display_text || ''}" 
                  data-index="${index}"
                  placeholder="Custom text or @username"
                />
              </div>

              <!-- URL Preview -->
              ${link.url ? `
                <div class="mt-3 p-3 bg-apple-gray-50 rounded-lg border border-apple-gray-200">
                  <div class="flex items-center space-x-2 text-sm">
                    <svg class="w-4 h-4 text-apple-green" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="text-apple-gray-600">Preview:</span>
                    <a href="${link.url}" target="_blank" class="text-apple-blue-500 hover:underline font-medium truncate max-w-xs">${link.url}</a>
                  </div>
                </div>
              ` : ''}
            </div>
          </div>
        `;
      }).join('');

      // Add event listeners
      container.querySelectorAll('.social-platform').forEach(select => {
        select.addEventListener('change', (e) => {
          updateSocialLink(e);
          updatePlatformIcon(e.target as HTMLSelectElement);
        });
      });
      container.querySelectorAll('.social-url').forEach(input => {
        input.addEventListener('input', updateSocialLink);
      });
      container.querySelectorAll('.social-display').forEach(input => {
        input.addEventListener('input', updateSocialLink);
      });
    }


    function addSocialLink() {
      socialLinks.push({
        platform: 'github',
        url: '',
        display_text: '',
        icon: 'fa-github'
      });
      renderSocialLinks();
    }

    // Global functions for removing links
    (window as any).removeSocialLink = function(index: number) {
      socialLinks.splice(index, 1);
      renderSocialLinks();
    };

    function updateSocialLink(e: Event) {
      const target = e.target as HTMLInputElement | HTMLSelectElement;
      const index = parseInt(target.getAttribute('data-index') || '0');
      const field = target.className.includes('social-platform') ? 'platform' :
                   target.className.includes('social-url') ? 'url' : 'display_text';
      
      if (socialLinks[index]) {
        socialLinks[index][field] = target.value;
        
        // Update icon based on platform
        if (field === 'platform') {
          const platform = SOCIAL_PLATFORMS[target.value as keyof typeof SOCIAL_PLATFORMS];
          if (platform) {
            socialLinks[index].icon = platform.icon;
          }
        }
      }
    }

    function updatePlatformIcon(selectElement: HTMLSelectElement) {
      const selectedValue = selectElement.value;
      const platform = SOCIAL_PLATFORMS[selectedValue as keyof typeof SOCIAL_PLATFORMS];
      
      if (platform) {
        // Find the icon element in the same container
        const container = selectElement.closest('.social-link-item');
        if (container) {
          // Update the icon in the left side of the select
          const iconElement = container.querySelector('.absolute.left-0 i') as HTMLElement;
          if (iconElement) {
            iconElement.className = `fab ${platform.icon} text-sm`;
            iconElement.style.color = platform.color;
          }
          
          // Update the header icon as well
          const headerIcon = container.querySelector('.w-10 i') as HTMLElement;
          if (headerIcon) {
            headerIcon.className = `fab ${platform.icon} text-lg`;
          }
          
          // Update the header container background color
          const headerContainer = container.querySelector('.w-10') as HTMLElement;
          if (headerContainer) {
            headerContainer.style.backgroundColor = platform.color;
          }
          
          // Update the platform name in header
          const headerTitle = container.querySelector('h3') as HTMLElement;
          if (headerTitle) {
            headerTitle.textContent = platform.name;
          }
        }
      }
    }


    async function handleSave(e: Event) {
      e.preventDefault();
      
      saveBtn.disabled = true;
      saveText?.classList.add('hidden');
      saveSpinner?.classList.remove('hidden');

      try {
        const formData = new FormData(configForm);
        const data: any = {};

        // Get form data
        for (const [key, value] of formData.entries()) {
          data[key] = value;
        }

        // Add social links
        data.social_links = socialLinks.filter(link => link.url.trim());

        const response = await window.authFetch('/api/site-config', {
          method: 'PUT',
          body: JSON.stringify(data),
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', Object.fromEntries(response.headers.entries()));

        if (!response.ok) {
          const errorText = await response.text();
          console.error('Response error text:', errorText);
          throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        const result = await response.json() as { success: boolean; data?: any; error?: string };

        console.log('Response result:', result);

        if (result.success) {
          showMessage('Configuration saved successfully!', 'success');
          currentConfig = result.data;
        } else {
          showMessage(result.error || 'Failed to save configuration', 'error');
        }
      } catch (error) {
        console.error('Save error:', error);
        showMessage('Network error, please try again', 'error');
      } finally {
        saveBtn.disabled = false;
        saveText?.classList.remove('hidden');
        saveSpinner?.classList.add('hidden');
      }
    }

    function showMessage(message: string, type: 'success' | 'error') {
      const bgColor = type === 'success' ? 'bg-green-50' : 'bg-red-50';
      const textColor = type === 'success' ? 'text-green-800' : 'text-red-800';
      const borderColor = type === 'success' ? 'border-green-200' : 'border-red-200';
      
      if (messageContainer) {
        messageContainer.innerHTML = `
          <div class="rounded-md ${bgColor} border ${borderColor} p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                ${type === 'success' 
                  ? '<svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>'
                  : '<svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z"></path></svg>'
                }
              </div>
              <div class="ml-3">
                <p class="${textColor} text-sm font-medium">${message}</p>
              </div>
            </div>
          </div>
        `;
        messageContainer.classList.remove('hidden');
        
        setTimeout(() => {
          messageContainer?.classList.add('hidden');
        }, type === 'success' ? 3000 : 8000);
      }
    }
  });
</script> 