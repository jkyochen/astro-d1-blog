---
export const prerender = false;

import BlogPost from '../../layouts/BlogPost.astro';
import { createRepositories } from '../../db/database';
import { processMarkdown } from '../../lib/markdown-utils';
import type { PostWithTags } from '../../db/database';
import type { Tag } from '../../types/database';

// Get post from database based on slug
const { slug } = Astro.params;

if (!slug) {
	return Astro.redirect('/404');
}

let post: PostWithTags | null = null;

try {
	if (Astro.locals.runtime?.env.DB) {
		const repositories = createRepositories(Astro.locals.runtime.env.DB);
		post = await repositories.posts.findBySlug(slug as string);
	}
} catch (error) {
	console.error('Error fetching post:', error);
}

if (!post || post.status !== 'published') {
	return Astro.redirect('/404');
}

// Convert database post to format expected by BlogPost layout
const postData = {
	title: post.title || 'Untitled',
	description: post.excerpt || '',
	pubDate: new Date(post.published_at || post.created_at),
	updatedDate: post.updated_at !== post.created_at ? new Date(post.updated_at) : undefined,
	heroImage: undefined, // Could be added to database schema later
	tags: post.tags as Tag[],
	type: post.type
};
---

<BlogPost {...postData}>
	<article class="prose prose-lg max-w-none" set:html={processMarkdown(post.content)} />
</BlogPost>
